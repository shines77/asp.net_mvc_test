
※ MVC的优缺点 ※ 

摘自: http://www.cnblogs.com/sevenyuan/archive/2009/12/18/1627229.html

======================================================================

1、 MVC的优点
      　　（1） 可以为一个模型在运行时同时建立和使用多个视图。变化-传播机制可以确保所有相关的视图及时得到模型数据变化，从而使所有关联的视图和控制器做到行为同步。
      　　（2） 视图与控制器的可接插性，允许更换视图和控制器对象，而且可以根据需求动态的打开或关闭、甚至在运行期间进行对象替换。
      　　（3） 模型的可移植性。因为模型是独立于视图的，所以可以把一个模型独立地移植到新的平台工作。需要做的只是在新平台上对视图和控制器进行新的修改。
      　　（4） 潜在的框架结构。可以基于此模型建立应用程序框架，不仅仅是用在设计界面的设计中。
2、 MVC的不足之处
      　　（1） 增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。
      　　（2） 视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。
      　　（3） 视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。
      　　（4） 目前，一般高级的界面工具或构造器不支持MVC模式。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成使用MVC的困难。 


======================================================================


※ 大家来说说ASP.Net MVC的优点与缺点？ ※ 

摘自: http://q.cnblogs.com/q/19279/

======================================================================

mvc的优点：

    1. 通过把项目分成model view和controller，使得复杂项目更加容易维护。
    2. 没有使用view state和服务器表单控件，可以更方便的控制应用程序的行为
    3. 应用程序通过controller来控制程序请求，可以提供丰富的url重写。
    4. 对单元测试的支持更加出色
    5. 在团队开发模式下表现更出众

MVC的不足： 

    （1）增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。   
    （2）视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。   
    （3）视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。

======================================================================



※ Asp.net MVC 解决了什么问题？有什么好处！※  

摘自: http://bbs.csdn.net/topics/300198627

=========================================================

9 楼的回复:

MVC的作用是将表现层、业务层（逻辑层）、数据控制层分离，
有利于代码的重用和扩展，降低系统的耦合。

表现层和业务层的分离，就是你说的界面和代码的分离，
这样的好处是，你底层实现的代码，不仅在你的ASP.NET中可以用，
就是改天你的老板突然说不用B/S架构了，那么除了界面部分，
你的业务层和数据控制层可以完全转移到winform中而不用做任何的改动。

其它的还有可以随时扩展代码（不同的类、方法等），继承，等等。
好处多了，

其他方面的疑问，
楼主可以查看面向对象OOA\OOD\OOP方面的资料。

=========================================================

23 楼的回复:

MVC (Model-View-Controller) 的网站应用程序开发架构，在 Java / JSP / J2EE 已行之多年，并曾衍生出 Struts 等开放源码的 Framework (框架)。其主要目的是为了在开发复杂的大型网站时，能将不同的功能作切割、提高程序代码的可读性，以及组件的可重用性，其结构如下：

● View (JSP) 只纯粹用来显示数据，不涉及数据来源的捞取、各种逻辑处理和运算工作。这层完全由美工人员负责制作。此层如同 ASP.NET 中的 .aspx 前端页面。

● Model (JavaBean、EJB 组件) 用来存放独立且可重复使用的组件，包括：数据来源 (数据库) 的存取、商业逻辑的程序代码，并应与 View 作完整的切割，以便保留系统日后扩充时的弹性。此层如同 ASP.NET 2.0 中的 App_Code 系统数据夹中存放的自订类、DataSet，或是自订的 .cs 或 .vb 类库。

● Controller (Java Servlet) 用来控制整个网站处理的「流程」，负责协调 View 和 Model 之间的流程传递和转向，也要管理和指派由谁去接收使用者所提出的「请求 (request)」。当使用者在 View 里送出 request (Form 中控件的选项或输入数据后 submit、URL 网址、点选超级链接…等等) 后，Controller 里定义的某些 method 会判断，要交由 Model 中的哪些运算逻辑去处理，然后再判断要将处理结果传回哪一个 View 去显示出来。Controller 也是目前 ASP.NET 1.x / 2.0 所欠缺的部分 。

事实上在 Java / JSP 常引用的网站开发架构中，还可分为 Model 1 与 Model 2。Model 1 还可分为二至三种，如下：
第一种是将 HTML 和 .NET (Java) code 混在一起，俗称意大利面式的写法，如：ASP。这种 Inline code 最为人垢病的问题是程序可读性低、难以维护。

第二种是由与 .aspx 一对一对应的 Code-Behind code 直接存取数据库，亦即二层式的架构。但这样的缺点是程序代码难以重复使用，且因为逻辑已经写死在固定的页面中，会造成系统日后扩充困难。

第三种是经由自订类别库、App_Code 数据夹中的自订类或软件组件，去存取数据库，或做商业逻辑的运算 (JSP + JavaBean)。但此种做法仍缺乏流程的统一控管，导致每一支 ASPX (JSP) 都要验证使用者身份、验证 request 的参数、处理 Session、做例外处理，甚至包括 View 里的编码原则、语系设定，都得在每一支 ASPX 对应的 Code-Behind 去处理，也因此不适合大型系统的开发、扩充和维护。这种架构虽然也能做到虚拟式的三层式或多层式架构，但也是目前 ASP.NET 2.0 的极限。

至于 Model 2，即俗称的 MVC Framework，则加入了 Controller 的部分，将流程及事件交由中心控管，除了可让整个系统的运作流程更为明确，有效切开各层的工作，亦可避免让 View 里的 Code-Behind 去处理 Model 中的数据库存取、商业逻辑运算，也不必再到处撰写「流程传递和转向」的程序代码，而改由中央的 Controller 程序代码 (action method) 来统一控管。

但 MVC 架构也有其缺点，例如开发人员需要另外花时间转换观念及学习 Framework，尤其是 .NET 的开发人员或团队，因为过去较没有 Controller 统一协调流程的观念，势必得重新习惯，将很多原本写死在各个页面中的程序代码，改写进 Controller 里面。而且系统在设计阶段时，即要先协调好各个类别对象彼此间数据交换的格式及做法，因此势必得拉长系统事先的分析、规划时程。但若能有像 Struts 或 .NET MVC Framework 这样现成的框架可套用，则日后开发大型系统时，即可望达到事半功倍的效果。
